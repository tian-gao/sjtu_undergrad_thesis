shiny::runApp('Freshfresh/Shiny Apps/appCRMIndividual')
dataPoint = read.csv('Freshfresh/Shiny Apps/appCRMIndividual/data/dataPoint.csv')
dataPoint['233028',]
dataPoint[233028,]
dataPoint["233028",]
View(dataPoint)
dataPoint[dataPoint$id == '233028',]
shiny::runApp('Freshfresh/Shiny Apps/appCRMIndividual')
shiny::runApp('Freshfresh/Shiny Apps/appCRMIndividual')
shiny::runApp('Freshfresh/Shiny Apps/appCRMIndividual')
library(RPostgreSQL)
?dbGetQuery
mtcars
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
parseQueryString("?foo=1")
x = shiny::runApp('Freshfresh/test')
x = parseQueryString("?foo=1")
x
x[foo]
x['foo']
x['foo',]
x[,'foo']
x['foo']
class(x)
class(x['foo'])
?session
unlist(x)
class(unlist(x))
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
x
RJSONIO::toJSON(x)
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny:::toJSON(x)
x
RJSONIO::toJSON(x)
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
shiny::runApp('Freshfresh/test')
x
RJSONIO::toJSON(x,'test.json')
runGist("https://gist.github.com/markheckmann/7563267")
runGist("https://gist.github.com/markheckmann/7554458")
runGist("https://gist.github.com/sckott/7478126")
install.packages("rook")
install.packages("Rook")
library(Rook)
Request$className
Request$url
env
helloworld <- function(env){
req <- Request$new(env)
res <- Response$new()
res$write('<h1>Hello World!</h1>\n')
res$finish()
}
helloworld()
library(Rook)
library(Rook)
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
p
s$launch(name='RookTest',app=file.path(p,'RookTestApp.R'))
s$launch(name='RookTest',app=file.path(p,'RookTestApp.R'))
s
s$launch(name='hello',app=file.path(p,'helloworld.R'))
s$launch(name='helloref',app=file.path(p,'helloworldref.R'))
s$launch(name='hmisc',app=file.path(p,'Hmisc/config.R'))
s$launch(name='summ',app=file.path(p,'summary.R'))
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
s$launch(name='helloref',app=file.path(p,'helloworldref.R'))
s$launch(name='hello',app=file.path(p,'helloworld.R'))
p
file.path(p,'helloworld.R')
s
open("/Library/Frameworks/R.framework/Versions/3.2/Resources/library/Rook/exampleApps/helloworld.R")
open.srcfile('/Library/Frameworks/R.framework/Versions/3.2/Resources/library/Rook/exampleApps/helloworld.R')
s$launch(name='hello',app='/Library/Frameworks/R.framework/Versions/3.2/Resources/library/Rook/exampleApps/helloworld.R')
library(Rook)
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
s$launch(name='testtest',app='Freshfresh/test.r')
s$launch(name='testtest',app='Freshfresh/test.r')
# Rook Test
library(Rook)
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
s$launch(name='testtest',app='Freshfresh/test.r')
s
app <- function(env){
req <- Rook::Request$new(env)
res <- Rook::Response$new()
#   friend <- 'World'
#   if (!is.null(req$GET()[['friend']]))
#     friend <- req$GET()[['friend']]
res$write(paste('<h1>Hello</h1>\n'))
res$finish()
}
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
s$start(quiet = TRUE)
s$print()
s$browse()
s
browse(s)
s$browse()
install.packages("devtools")
library(devtools)
install_github("filipstachura/Rook")
s = Rhttpd$new()
p = system.file('exampleApps',package='Rook')
s$start(quiet = TRUE)
s$browse()
s$launch(name='testtest',app='Freshfresh/test.r')
s
s
s$launch(name='testtest',app='Freshfresh/test.r')
toJSON(iris)
RJSONIO::toJSON(iris)
s$launch(name='testtest',app='Freshfresh/test.r')
myPort <- 8000
myInterface <- "0.0.0.0"
status <- -1
# R 2.15.1 uses .Internal, but the next release of R will use a .Call.
# Either way it starts the web server.
if (as.integer(R.version[["svn rev"]]) > 59600) {
status <- .Call(tools:::startHTTPD, myInterface, myPort)
} else {
status <- .Internal(startHTTPD(myInterface, myPort))
}
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", myPort, environment(tools:::startDynamicHelp))
s <- Rhttpd$new()
s$listenAddr <- myInterface
s$listenPort <- myPort
# Change this line to your own application. You can add more than one
# application if you like
s
as.integer(R.version[["svn rev"]])
.Call(tools:::startHTTPD, myInterface, myPort)
.Internal(startHTTPD(myInterface, myPort))
host = '0.0.0.0'
port = 8000
status = .Call(tools:::startHTTPD, host, port)
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", port, environment(tools:::startDynamicHelp))
s = Rhttpd$new()
s$launch(name='testtest',app='Freshfresh/test.r')
status <- -1
status <- .Call(tools:::startHTTPD, myInterface, myPort)
status = .Call(tools:::startHTTPD, host, port)
host = '0.0.0.0'
port = 8000
status = .Call(tools:::startHTTPD, host, port)
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", port, environment(tools:::startDynamicHelp))
s = Rhttpd$new()
s
s$listenAddr = host
s$listenPort = port
s$launch(name='testtest',app='Freshfresh/test.r')
s
s$listenAddr = 'localhost'
s$listenPort = port
s$launch(name='testtest',app='Freshfresh/test.r')
s
s = Rhttpd$new()
s$listenAddr = host
s$listenPort = port
s$launch(name='testtest',app='Freshfresh/test.r')
s
s = Rhttpd$new()
s$listenAddr = host
s$listenPort = port
s$launch(name='testtest',app=app)
s = Rhttpd$new()
s$launch(name='testtest',app=app)
s$add(name = "test", app = Rook.app)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
app()
app <- function(env) {
req <- Rook::Request$new(env)
res <- Rook::Response$new()
#   friend <- 'World'
#   if (!is.null(req$GET()[['friend']]))
#     friend <- req$GET()[['friend']]
#   list(
#     status=ifelse(length(errors)<=0,200L,400L),
#     headers=list('Content-Type' = 'application/json'),
#     body=body
#   )
#
res$write(paste('<h1>Hello</h1>\n'))
res$finish()
}
s = Rhttpd$new()
s$launch(name='testtest',app=app)
library(Rook)
s = Rhttpd$new()
s$launch(name='testtest',app=app)
app <- function(env) {
req <- Rook::Request$new(env)
res <- Rook::Response$new()
#   friend <- 'World'
#   if (!is.null(req$GET()[['friend']]))
#     friend <- req$GET()[['friend']]
#   list(
#     status=ifelse(length(errors)<=0,200L,400L),
#     headers=list('Content-Type' = 'application/json'),
#     body=body
#   )
#
res$write(paste('<h1>Hello</h1>\n'))
res$finish()
}
s$launch(name='testtest',app=app)
host = '0.0.0.0'
port = 8000
s = Rhttpd$new()
s$listenAddr = host
s$listenPort = port
s$launch(name='testtest',app=app)
s
host = '0.0.0.0'
port = 8000
status = .Call(tools:::startHTTPD, host, port)
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", port, environment(tools:::startDynamicHelp))
s = Rhttpd$new()
s$listenAddr = host
s$listenPort = port
s$launch(name='testtest',app=app)
s
library(Rook)
host = '0.0.0.0'
port = 8000
status = .Call(tools:::startHTTPD, host, port)
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", port, environment(tools:::startDynamicHelp))
s = Rhttpd$new()
s$listenAddr = host
s$listenPort = port
s$add(name='testtest',app=app)
s
s.browse()
Request$get
Request$get()
Sys.sleep(24 * 60 * 60)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
data = data.frame(a=c(1,2,3),b=('a','b','c'))
data = data.frame(a=c(1,2,3),b=c('a','b','c'))
s$add(name='testtest',app='Freshfresh/test.r')
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
Request$GET
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
source('~/Documents/R/Freshfresh/rooktest.r', echo=TRUE)
3100^2
(2100/1600)^(1/3)-1
library(ggplot2)
library(dplyr)
library(reshape2)
library(grid)
setwd('/Users/troy_sky/Documents/R/Thesis')
vplayout = function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
# Data Loading
dataFullIndex = read.csv('dataHistoricalIndex.csv')
dataRetPrediction = read.csv('dataHMMPrediction.csv')
setwd('/Users/troy_sky/Documents/R/Thesis/daily')
vplayout = function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
# Data Loading
dataFullIndex = read.csv('dataHistoricalIndex.csv')
dataRetPrediction = read.csv('dataHMMPrediction.csv')
dataRetIn = read.csv('dataInSample.csv')
dataOut = dataRetPrediction[(nrow(dataRetIn)+1):(nrow(dataRetPrediction)-1),]
dataOut$real = diff(log(dataFullIndex$close))[(nrow(dataRetIn)+6):(nrow(dataFullIndex)-1)]
dataOut$right = sign(dataOut$ret) == sign(dataOut$real)
winRatio = sum(dataOut$right) / nrow(dataOut)
print(winRatio)
